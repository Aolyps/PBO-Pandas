# -*- coding: utf-8 -*-
"""M11_5230411294_Fradeka Nur Choerun Kristiyanto_Pandas

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cCNi-4utkuFea2A4_-JE1yWDZxh6rnhq
"""

import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from sklearn.neighbors import KNeighborsClassifier

# Fungsi preprocessing
def preprocess_data(file_path):
    try:
        # Baca file Excel
        data = pd.read_excel(file_path)
        print("Data berhasil dimuat.")

        # Info dataset
        print("Info data:")
        print(data.info())

        # Cek missing value
        if data.isnull().sum().sum() > 0:
            print("Missing values terdeteksi. Melakukan imputasi...")
            data = data.fillna(data.mean(numeric_only=True))
            data = data.fillna(data.mode().iloc[0])  # Untuk kolom non-numerik
            print("Imputasi selesai.")
        else:
            print("Tidak ada missing values.")

        # Encode kolom string (jika ada)
        for column in data.select_dtypes(include=['object']).columns:
            print(f"Encoding kolom: {column}")
            le = LabelEncoder()
            data[column] = le.fit_transform(data[column])

        return data
    except Exception as e:
        print(f"Error saat memuat data: {e}")
        return None

# Fungsi analisis
def analyze_data(data, target_column, algorithm):
    try:
        X = data.drop(columns=[target_column])
        y = data[target_column]

        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

        if algorithm == 'RandomForest':
            model = RandomForestClassifier()
        elif algorithm == 'SVM':
            model = SVC()
        elif algorithm == 'KNN':
            model = KNeighborsClassifier()
        else:
            print("Algoritma tidak dikenali.")
            return

        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)
        accuracy = accuracy_score(y_test, y_pred)

        print(f"Akurasi model {algorithm}: {accuracy:.2f}")
    except Exception as e:
        print(f"Error saat analisis: {e}")

# Terminal untuk menerima input pengguna
while True:
    print("\n=== MENU UTAMA ===")
    print("1. Preprocess Data")
    print("2. Analisis Data")
    print("3. Keluar")

    try:
        choice = int(input("Masukkan pilihan Anda: "))

        if choice == 1:
            file_path = input("Masukkan path file (contoh: /mnt/data/air_quality.xlsx): ")
            data = preprocess_data(file_path)

        elif choice == 2:
            if 'data' not in locals() or data is None:
                print("Data belum diproses. Silakan lakukan preprocessing terlebih dahulu.")
                continue

            target_column = input("Masukkan nama kolom target: ")
            algorithm = input("Masukkan algoritma (RandomForest/SVM/KNN): ")
            analyze_data(data, target_column, algorithm)

        elif choice == 3:
            print("Keluar dari program.")
            break

        else:
            print("Pilihan tidak valid. Silakan coba lagi.")
    except ValueError:
       print("Input tidak valid. Harap masukkan angka.")